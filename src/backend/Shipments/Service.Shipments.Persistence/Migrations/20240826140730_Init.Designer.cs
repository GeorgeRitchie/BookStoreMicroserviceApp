// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Service.Shipments.Persistence;

#nullable disable

namespace Service.Shipments.Persistence.Migrations
{
    [DbContext(typeof(ShipmentDbContext))]
    [Migration("20240826140730_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shipment")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Persistence.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "shipment");
                });

            modelBuilder.Entity("Persistence.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "shipment");
                });

            modelBuilder.Entity("Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "shipment");
                });

            modelBuilder.Entity("Persistence.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "shipment");
                });

            modelBuilder.Entity("Service.Shipments.Domain.BookSources.BookSource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("book_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("format");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_book_sources");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_sources_book_id");

                    b.ToTable("book_sources", "shipment");
                });

            modelBuilder.Entity("Service.Shipments.Domain.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<long>("AgeRating")
                        .HasColumnType("bigint")
                        .HasColumnName("age_rating");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<string>("ISBN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("isbn");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("language");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.ToTable("books", "shipment");
                });

            modelBuilder.Entity("Service.Shipments.Domain.ShipmentItems.ShipmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookSourceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("book_source_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_on_utc");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("shipment_id");

                    b.HasKey("Id")
                        .HasName("pk_shipment_items");

                    b.HasIndex("BookSourceId")
                        .HasDatabaseName("ix_shipment_items_book_source_id");

                    b.HasIndex("ShipmentId")
                        .HasDatabaseName("ix_shipment_items_shipment_id");

                    b.ToTable("shipment_items", "shipment");
                });

            modelBuilder.Entity("Service.Shipments.Domain.Shipments.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_on_utc");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("OrderedDateTimeUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("ordered_date_time_utc");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_shipments");

                    b.ToTable("shipments", "shipment");
                });

            modelBuilder.Entity("Service.Shipments.Domain.BookSources.BookSource", b =>
                {
                    b.HasOne("Service.Shipments.Domain.Books.Book", "Book")
                        .WithMany("Sources")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_book_sources_books_book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Service.Shipments.Domain.ShipmentItems.ShipmentItem", b =>
                {
                    b.HasOne("Service.Shipments.Domain.BookSources.BookSource", "BookSource")
                        .WithMany()
                        .HasForeignKey("BookSourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_shipment_items_book_sources_book_source_id");

                    b.HasOne("Service.Shipments.Domain.Shipments.Shipment", "Shipment")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shipment_items_shipments_shipment_id");

                    b.Navigation("BookSource");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Service.Shipments.Domain.Shipments.Shipment", b =>
                {
                    b.OwnsOne("Service.Shipments.Domain.Shipments.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_country");

                            b1.Property<string>("District")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_district");

                            b1.Property<string>("Home")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_home");

                            b1.Property<string>("Region")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_region");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_street");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("shipments", "shipment");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId")
                                .HasConstraintName("fk_shipments_shipments_id");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Service.Shipments.Domain.Books.Book", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Service.Shipments.Domain.Shipments.Shipment", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
